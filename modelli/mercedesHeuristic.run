reset;
#to evaluate 
#option presolve 0;

option solver gurobi;
option gurobi_options 'timing=1 outlev=1 threads=1 MIPFocus=1 timelim=30 mipstart=2 mipgap=1e-5' ;
#option show_stats 1;
model MercedesHeuristic.mod;
data data/mercedesTDHeur/metroplex63nDr0nDe3.dat;
param iterations default 0;
#parametri d
param alpha default 4;				#fattore moltiplicativo della distanza in caso di conflitto
param localMinParam default 3;		#dopo quante volte che trovo la stessa soluzione mi fermo
param maxIteration default 20;		#numero massimo iterazioni dell'euristica
param eps default 1e-4;				# valore che mi definse "l'errore" permesso per confrontare l'uguaglianza

param found default 0;
param lastOpt default 0;
param sameOpt default 0;
#heuristic var
param timeLimit default 30;
param tempNode default Infinity;
param t_ear_temp{F,V} default 0;
let {f in F} t_ear_temp[f,s[f]]:=t_hat_ear[f,s[f]];
set tempSet within {E} default {};
param gapUnf default 5;

for {f in F,(i,j) in E}
	let dMCF[f,i,j]:= d[i,j];
#salvo w per AP e NC
for {f in AP, (x,y) in E}
	let w[x,y,f]:=0;
for {(f,x,y) in PathAP}
	let w[x,y,f]:=1;

for {f in NC, (x,y) in E}
	let w[x,y,f]:=0;
for {(f,x,y) in PathNC}
	let w[x,y,f]:=1; 	

repeat
{
	printf "solving path in it %d\n\n",iterations;
	solve path;
	if solve_result <> "solved" then
	{
		printf "path not found in given time\n";
        display solve_result, solve_result_num;
		break;
	}
    printf("fixing w\n");
	
	let{(i,j) in E, f in F diff (AP union NC)} w[i,j,f]:=wPath[i,j,f];
	solve conflicts;
	for {f in F}
	{
		let tempSet := {(x,y) in E: w[x,y,f] == 1};
		let tempNode := s[f];
		repeat while (tempNode <> e[f])
		{
			for {(tempNode,i) in tempSet}
			{
				let t_ear_temp[f,i]:=t_ear_temp[f,tempNode] + d[tempNode,i]/v_min;
				let tempSet:=tempSet diff {(tempNode,i)};
				let tempNode:=i;
				break;
			}
		}
	}

	display solve_result, solve_result_num;
	if solve_result_num == 472 and obtainedSol==0 then
	{
		let timeLimit := 120*(1+iterations);
		option gurobi_options ('timing=1 outlev=1 threads=1 MIPFocus=1 mipstart=2 mipgap=1e-5 timelim=' & timeLimit) ;
		solve conflicts > (log_name);
		option gurobi_options 'timing=1 outlev=1 threads=1 MIPFocus=1 timelim=30 mipstart=2 mipgap=1e-5' ;
	}
	else if solve_result == "solved" or (400<=solve_result_num and solve_result_num<=405) then
	{
		let obtainedSol:=1;
	}
	else
	{
		printf "conflicts not solved\n, exit";
	}
	if solve_result<>"infeasible" and abs(UAM - lastOpt) < eps then
    {
        let sameOpt:=sameOpt+1;
    }
    else
    {
        let sameOpt:=0;
    }
	let iterations:=iterations + 1;
    let lastOpt:=UAM;
	if(sameOpt >= localMinParam or iterations > maxIteration) then
	{
		let found:=1;
	}
    else
	{
		if solve_result=="infeasible" or solve_result_num==472/*and card(NC)<> 0*/ then
		{
			for{f1 in F, f2 in F,x in V: f1 <> f2 and (f1,x) in FV and (f2,x) in FV and (abs(t_ear_temp[f1,x] - t_ear_temp[f2,x]) <= gapUnf or abs(t_hat_ear[f1,x]-t_hat_ear[f2,x]) <= gapUnf)/* and f1 in NC or f2 in NC */}
			{
				for {(a,b) in E: a==x or b==x}
				{
					let dMCF[f1,a,b] := min(sqrt(alpha) * dMCF[f1,a,b],1e5);
					let dMCF[f2,a,b] := min(sqrt(alpha) * dMCF[f2,a,b],1e5);
				}
			}
		}
		else
		{
			for { f1 in F, f2 in F,x in V: f1 <> f2 and (f1,x) in FV and (f2,x) in FV }
			{
				for {(fl1,fl2,a,b) in trail1 : a==x and fl1==f1 and fl2==f2 and (trail13[f1,f2,a,b].slack == 0 or trail14[f1,f2,a,b].slack==0)}
				{
					print "trail1,%d,%d,%d,%d",fl1,fl2,a,b;
					let dMCF[fl1,a,b] := min(sqrt(alpha) * dMCF[fl1,a,b],1e5);
					let dMCF[fl2,a,b] := min(sqrt(alpha) * dMCF[fl2,a,b],1e5);
				}
				for {(fl1,fl2,a,b) in trail2 : b==x and fl1==f1 and fl2==f2 and (trail23[f1,f2,a,b].slack==0 or trail24[f1,f2,a,b].slack==0)}
				{
					print "trail2, %d,%d,%d,%d",fl1,fl2,a,b;
					let dMCF[fl1,a,b] := min(sqrt(alpha) * dMCF[fl1,a,b],1e5);
					let dMCF[fl2,a,b] := min(sqrt(alpha) * dMCF[fl2,a,b],1e5);
				}
				for {(fl1,fl2,a,b,c) in merge : a==x and fl1==f1 and fl2==f2 and (merge3[f1,f2,a,b,c].slack==0 or merge4[f1,f2,a,b,c].slack==0)}
				{
					print"merge, %d,%d,%d,%d,%d",fl1,fl2,a,b,c;
					let dMCF[fl1,b,a] := min(sqrt(alpha) * dMCF[fl1,b,a],1e5);
					let dMCF[fl1,c,a] := min(sqrt(alpha) * dMCF[fl1,c,a],1e5);
					let dMCF[fl2,b,a] := min(sqrt(alpha) * dMCF[fl2,b,a],1e5);
					let dMCF[fl2,c,a] := min(sqrt(alpha) * dMCF[fl2,c,a],1e5);
				}
				/*for {(fl1,fl2,a,b,c) in merge2 : a==x and fl1==f1 and fl2==f2 and (merge3_2[f1,f2,a,b,c].slack==0 or merge4_2[f1,f2,a,b,c].slack==0)}
				{
					let dMCF[fl1,b,a] := min(sqrt(alpha) * dMCF[fl1,b,a],1e5);
					let dMCF[fl1,c,a] := min(sqrt(alpha) * dMCF[fl1,c,a],1e5);
					let dMCF[fl2,b,a] := min(sqrt(alpha) * dMCF[fl2,b,a],1e5);
					let dMCF[fl2,c,a] := min(sqrt(alpha) * dMCF[fl2,c,a],1e5);
				}*/
				for {(fl1,fl2,a,b,c) in split : a==x and fl1==f1 and fl2==f2 and (split3[f1,f2,a,b,c].slack==0 or split4[f1,f2,a,b,c].slack==0)}
				{
					print "split,%d,%d,%d,%d,%d",fl1,fl2,a,b,c;
					let dMCF[fl1,a,b] := min(sqrt(alpha) * dMCF[fl1,a,b],1e5);
					let dMCF[fl1,a,c] := min(sqrt(alpha) * dMCF[fl1,a,c],1e5);
					let dMCF[fl2,a,b] := min(sqrt(alpha) * dMCF[fl2,a,b],1e5);
					let dMCF[fl2,a,c] := min(sqrt(alpha) * dMCF[fl2,a,c],1e5);
				}
				/*for {(fl1,fl2,a,b,c) in split2 : a==x and fl1==f1 and fl2==f2 and (split3_2[f1,f2,a,b,c].slack==0 or split4_2[f1,f2,a,b,c].slack==0)}
				{
					let dMCF[fl1,a,b] := min(sqrt(alpha) * dMCF[fl1,a,b],1e5);
					let dMCF[fl1,a,c] := min(sqrt(alpha) * dMCF[fl1,a,c],1e5);
					let dMCF[fl2,a,b] := min(sqrt(alpha) * dMCF[fl2,a,b],1e5);
					let dMCF[fl2,a,c] := min(sqrt(alpha) * dMCF[fl2,a,c],1e5);
				}*/			
				for {(fl1,fl2,a,b,c) in diver1: a==x and fl1==f1 and fl2==f2 and (diver3_1[f1,f2,a,b,c].slack==0 or diver4_1[f1,f2,a,b,c].slack==0)}
				{
					print"diver1,%d,%d,%d,%d,%d",fl1,fl2,a,b,c;
					let dMCF[fl1,a,b] := min(sqrt(alpha) * dMCF[fl1,a,b],1e5);
					let dMCF[fl1,c,a] := min(sqrt(alpha) * dMCF[fl1,c,a],1e5);
					let dMCF[fl2,a,b] := min(sqrt(alpha) * dMCF[fl2,a,b],1e5);
					let dMCF[fl2,c,a] := min(sqrt(alpha) * dMCF[fl2,c,a],1e5);
				}
				for {(fl1,fl2,a,b,c) in diver2: a==x and fl1==f1 and fl2==f2 and (diver3_2[f1,f2,a,b,c].slack==0 or diver4_2[f1,f2,a,b,c].slack==0)}
				{
					print "diver2,%d,%d,%d,%d,%d",fl1,fl2,a,b,c;
					let dMCF[fl1,a,b] := min(sqrt(alpha) * dMCF[fl1,a,b],1e5);
					let dMCF[fl1,c,a] := min(sqrt(alpha) * dMCF[fl1,c,a],1e5);
					let dMCF[fl2,a,b] := min(sqrt(alpha) * dMCF[fl2,a,b],1e5);
					let dMCF[fl2,c,a] := min(sqrt(alpha) * dMCF[fl2,c,a],1e5);
				}
			}
		}
	}


}
while (found==0);
