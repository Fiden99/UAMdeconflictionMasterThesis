reset;
option solver gurobi;
model multiComodity.mod;
param data_name symbolic;
#let data_name :=sprintf("data/%s",($datFile));
let data_name:="data/metroplex10.dat";
data (data_name);
#option gurobi_options 'timing=1 outlev=1 threads=1';
param iterations;
let iterations:=0;
param alpha;
let alpha:=10;
param found;
param starting_time:=time();
repeat
{
	let found:= 0;
	solve path;
	printf "find path\n";
	display w;
	fix {f in F, i in V,j in V: (i,j)in E} w[i,j,f]:=w[i,j,f];
	printf "fixed\n";
	solve conflicts;
	printf "solved conflicts\n";
	display w;
	if (solve_result == 0) then
	{
		let found:=1;
		printf "solution found";
	}
	else
	{
		for { f1 in F, f2 in F, i in V, j in V: (i,j) in E and f1 <> f2 } 
		{
			  if (w[i,j,f1] + w[i,j,f2] == 2) then 
			  {
			  #c'Ã¨ un conflitto, ma non sono sicuro che sia quello interessato
			    printf "conflict between flights %d %d in arc (%d,%d)\n", f1, f2, i, j;
			    let d[i,j] := alpha * d[i,j];
			  }
		}
	}
	let iterations:=iterations + 1;
	unfix{ i in V, j in V,f in F} w[i,j,f];
}
while (found==0);
display iterations, starting_time-time(),UAM, w, t_ear;