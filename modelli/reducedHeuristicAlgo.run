reset;
#to evaluate 
option presolve 0;

option solver gurobi;
option gurobi_options 'timing=1 outlev=1 threads=1 timelim=60';
param data_name symbolic;
let data_name :=sprintf("%s/data/nn%snf%s/%s.dat",($absPath),($nNodes),($nFlights),($datFile));
#let data_name :=sprintf("%s/data/nn10nf100/%s.dat",($absPath),($datFile));
param model_name symbolic;
let model_name :=sprintf("%s/multiComodity.mod",($absPath));
model (model_name);
data (data_name);
param iterations;
let iterations:=0;
param alpha;
let alpha:=4;
param found default 0;
param sol_name symbolic;
let sol_name := sprintf("%s/heuristicOut/nn%snf%s/%s/60%s.sol", ($absPath),($nNodes),($nFlights),($value),($datFile));
#let sol_name := sprintf("%s/heuristicOut/nn10nf100/%s%s.sol", ($absPath),($value),($datFile));
# Define the name of the file where the log of the solver will be saved
param log_name symbolic;
let log_name := sprintf("%s/heuristicOut/nn%snf%s/%s/60%s.log",($absPath),($nNodes),($nFlights),($value),($datFile));
#let log_name := sprintf("%s/heuristicOut/nn10nf100/%s%s.log",($absPath),($value),($datFile));
display data_name;
for {(i,j) in E}
	let dMCF[i,j]:= d[i,j];

param lastOpt default 0;
param sameOpt default 0;
#heuristic var
param opt default Infinity;

param opt_t_down{F,V} default Infinity;
param opt_t_up{F,V} default Infinity;

param opt_t_ear{F,V} default Infinity;															
param opt_t_lat{F,V} default Infinity;		

param opt_l{F,F,V} default Infinity;

param opt_w{(i,j) in E,F} default Infinity;		

param optTime default Infinity;
param iteropt default Infinity;
param obtainedSol binary default 0;
param t_hat_ear_backup{F,V} default Infinity;
param t_hat_lat_backup{F,V} default Infinity;
#param cutoff default Infinity;
#trying to reduce dimension of let
set F_pairs := {i in F, j in F: i<>j};
set nodesM  := {x in V, (x1,x) in E, (x2,x) in E: x1<>x2};
set nodesD  := {x in V, (x,x1) in E, (x2,x) in E: x1<>x2};
set nodesS  := {x in V, (x,x1) in E, (x,x2) in E: x1<>x2};
param tempNode default Infinity;
display nodesM,nodesS,nodesD;
repeat
{
	printf "solving path in it %d\n\n",iterations> (log_name);
	solve path >(log_name);
    #solve minCon >(log_name);
	if solve_result <> "solved" then
	{
		printf "path not found in given time\n";
        display solve_result, solve_result_num;
		break;
	}
    # 
    printf("fixing w\n");
	
	let{(i,j) in E, f in F} w[i,j,f]:=wPath[i,j,f];
	
	let {f in F, i in V} t_hat_ear_backup[f,i]:=t_hat_ear[f,i];
	let {f in F, i in V} t_hat_lat_backup[f,i]:=t_hat_lat[f,i];
	if iterations > 0 then 
	{
		for {f in F}
		{
			let tempNode := s[f];
			repeat while (tempNode <> e[f])
			{
				for {(tempNode,i) in E : w[tempNode,i,f] == 1}
				{
					# valutare d o dMCF
					let t_hat_ear[f,i]:=t_hat_ear[f,tempNode] + d[tempNode,i]/v_min[f,tempNode,i];
					printf"%d,t_hat_ear[%d,%d]:=%f\t t_hat_ear_backup:=%f;\n",tempNode,f,i, t_hat_ear[f,i], t_hat_ear_backup[f,i];
					let t_hat_lat[f,i]:=t_hat_ear[f,i] + 2;
					let tempNode:=i;
					break;
				}
			}
		}
	}
    #solving with fixed variables
	display t_hat_ear, t_hat_lat;
	solve conflicts > (log_name);
	
	let {f in F, i in V} t_hat_ear[f,i]:=t_hat_ear_backup[f,i];
	let {f in F, i in V} t_hat_lat[f,i]:=t_hat_lat_backup[f,i];
    
	display t_ear, t_lat;

	display solve_result, solve_result_num;
	if (solve_result == "solved" or (400<=solve_result_num and solve_result_num<=405)) then
	{
		let obtainedSol:=1;
        printf "solved conflicts\n";
        #update optimal solution
		if (opt > UAM) then
		{
			let opt:=UAM;
			let iteropt:=iterations;
			let optTime:=(_ampl_elapsed_time + _total_solve_elapsed_time);
			#let cutoff:=opt*2;
			for {f in F,i in V}
			{
				let opt_t_down[f,i]:= t_down[f,i];
				let opt_t_up[f,i]:= t_up[f,i];
				let opt_t_ear[f,i]:=t_ear[f,i];															
				let opt_t_lat[f,i]:= t_lat[f,i];															
			}
            let {i in F, j in F, x in V: i<>j and (sum{(x,x1) in E} w[x,x1,i] + sum{(x1,x) in E} w[x1,x,i] >= 1) and (sum{(x,x1) in E} w[x,x1,j] + sum{(x1,x) in E} w[x1,x,j] >= 1)} opt_l[i,j,x]:=l[i,j,x];
			let {(x,y) in E,f in F} opt_w[x,y,f]:=w[x,y,f];
		}
	}
    else
    {
        printf "conflicts not solved\n, exit";
        let iterations:=iterations + 1;
        break;
    }
    #if (solve_result =="solved") then
	#if (solve_result == "solved" or iterations>100) then
	if (solve_result == "solved" or sameOpt>=10 or iterations>200) then
	{
		let found:=1;
	}
	else 	
	{
		#come posso capire dove ci sono i conflitti se non ho una soluzione?
		for { f1 in F, f2 in F,(i,j) in E: f1 <> f2 } 
		{
			  if (w[i,j,f1] + w[i,j,f2] == 2) then 
			  {
			  let dMCF[i,j] := min(sqrt(alpha) * dMCF[i,j],1e5);
			  }
		}
	}
    if (UAM == lastOpt) then
    {
        let sameOpt:=sameOpt+1;
    }
    else
    {
        let sameOpt:=0;
    }
	display dMCF;
	let iterations:=iterations + 1;
    let lastOpt:=UAM;
	#let cutoff:= cutoff- 0.1*opt;

}
while (found==0);
param result_name symbolic;
let result_name := sprintf("%s/results/%s_60_heuristicnn%snf%s.csv",($absPath),($value),($nNodes),($nFlights));
#"numero nodi","numero voli","tipologia","istanza", "risultato euristica","tempo euristica","optTime","numero iterazioni","iterazione dove trovo ottimo"
if (obtainedSol == 0) then
	printf "%s,%s,%s,60,+Inf,%f,+Inf,%d,+Inf\n",($nNodes),($nFlights),($datFile),(_ampl_elapsed_time + _total_solve_elapsed_time),iterations >> (result_name);
else
{
	printf "%s,%s,%s,60,%d,%f,%f,%d,%d\n",($nNodes),($nFlights),($datFile),opt,(_ampl_elapsed_time + _total_solve_elapsed_time),optTime,iterations,(iteropt+1) >> (result_name);
	# Store the solution in a file
	printf "### total_solve_time = %f\n\n",(_ampl_elapsed_time + _total_solve_elapsed_time) > (sol_name);
	display opt, iterations, optTime,iteropt>(sol_name);
	printf "variable\t\t value\n" >(sol_name);
	for {(i,j) in E, f in F}{
		printf "w[%d,%d,%d] :=\t %d;\n", i,j,f, opt_w[i,j,f] > (sol_name);
	}
	for {i in V,f in F}
	{
		printf"t_ear[%d,%d] :=\t%f;\n",f,i,opt_t_ear[f,i]> (sol_name);															
		printf"t_lat[%d,%d] :=\t%f;\n",f,i,opt_t_lat[f,i]> (sol_name);															
		printf"t_down[%d,%d] :=\t%f;\n",f,i, opt_t_down[f,i] > (sol_name);
		printf"t_up[%d,%d] :=\t%f;\n",f,i,opt_t_up[f,i]> (sol_name);
	}
	for {i in F, j in F, x in V: i<j and (sum{(x,x1) in E} w[x,x1,i] + sum{(x1,x) in E} w[x1,x,i] >= 1) and (sum{(x,x1) in E} w[x,x1,j] + sum{(x1,x) in E} w[x1,x,j] >= 1)}
	{
		printf"l[%d,%d,%d] :=\t%f;\n",i,j,x,opt_l[i,j,x]> (sol_name);
	}
}

